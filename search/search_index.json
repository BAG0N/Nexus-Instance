{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nexus Instance Nexus Instance is a framework meant to simplify the creation of classes in Lua, both in terms of syntax and being able to have the context of \"super\". The framework includes a base NexusObject class, as well as a more powerful NexusInstance class to allow for locking of properties and a Changed event.","title":"Home"},{"location":"#nexus-instance","text":"Nexus Instance is a framework meant to simplify the creation of classes in Lua, both in terms of syntax and being able to have the context of \"super\". The framework includes a base NexusObject class, as well as a more powerful NexusInstance class to allow for locking of properties and a Changed event.","title":"Nexus Instance"},{"location":"contributing/","text":"Contributing Bugs and requests can be made through issues. Pull requests are open, but will only be accepted if they have the following: 1. A reason to be pulled. 2. Follow the existing coding standards (tabs, PascalCase, etc). 3. Have the appropriate unit tests as examples. This is mainly for new utilities. 4. Comments are included. Pulling Into Studio The format of this repository is based on Rojo by LPGhatguy . Any other tools that follow the same file structure will work. Exporting From Studio No public tool is currently provided for exporting Rojo projects from Roblox Studio. \"Nexus Project Syncer\" currently exists as an internal tool but will require significant work done before it can be released. The end goal of that project will be to replace Rojo while still being compatible. This functionality is expected to be added to Rojo in the near future.","title":"Contributing"},{"location":"contributing/#contributing","text":"Bugs and requests can be made through issues. Pull requests are open, but will only be accepted if they have the following: 1. A reason to be pulled. 2. Follow the existing coding standards (tabs, PascalCase, etc). 3. Have the appropriate unit tests as examples. This is mainly for new utilities. 4. Comments are included.","title":"Contributing"},{"location":"contributing/#pulling-into-studio","text":"The format of this repository is based on Rojo by LPGhatguy . Any other tools that follow the same file structure will work.","title":"Pulling Into Studio"},{"location":"contributing/#exporting-from-studio","text":"No public tool is currently provided for exporting Rojo projects from Roblox Studio. \"Nexus Project Syncer\" currently exists as an internal tool but will require significant work done before it can be released. The end goal of that project will be to replace Rojo while still being compatible. This functionality is expected to be added to Rojo in the near future.","title":"Exporting From Studio"},{"location":"why-nexus-instance/","text":"Why Nexus Instance The purpose of Nexus Instance is to simplify classes on Roblox. Although it isn't supported, NexusObject should work off of Roblox. NexusInstance uses Roblox's BindableEvent object, so it will only work on Roblox. Simplified Constructor The main advantage of the Nexus Instance is simplfying the constructor. This removes the requirement for knowledge of metamethods. Example with metamethods: local TestClass = {} --[[ Constructor for TestClass. --]] function TestClass . new ( Value ) --Create the base object. local Object = { Value = Value } setmetatable ( Object , TestClass ) TestClass . __index = TestClass --Return the object. return Object end --[[ Returns the value of the class. --]] function TestClass : GetValue () return self . Value end --Create an instance of the class. local TestObject = TestClass . new ( 2 ) print ( TestObject : GetValue ()) --2 Example: local NexusObject = game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"NexusObject\" ) local NexusInstance = require ( NexusObject : WaitForChild ( \"NexusInstance\" )) local TestClass = NexusInstance : Extend () --[[ Constructor for TestClass. --]] function TestClass : __new ( Value ) --Set the value. self . Value = Value end --[[ Returns the value of the class. --]] function TestClass : GetValue () return self . Value end --Create an instance of the class. local TestObject = TestClass . new ( 2 ) print ( TestObject : GetValue ()) --2 Improved Extending Nexus Instance provides the context of \"super\" objects. Instanciating the super class can also include parameters using the NexusObject:InitializeSuper(...) function. Example: local NexusObject = game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"NexusObject\" ) local NexusInstance = require ( NexusObject : WaitForChild ( \"NexusInstance\" )) local TestClass = NexusInstance : Extend () local TestSubClass = TestClass : Extend () --[[ Constructor for TestClass. --]] function TestClass : __new ( Value ) --Set the value. self . Value = Value end --[[ Returns the value of the class. --]] function TestClass : GetValue () return self . Value end --[[ Constructor for TestSubClass. --]] function TestSubClass : __new ( Value ) self : InitializeSuper ( Value ) end --[[ Returns the value of the super class plus one. --]] function TestClass : GetValuePlusOne () return self . super : GetValue () + 1 end --Create an instance of the class. local TestObject = TestSubClass . new ( 2 ) print ( TestObject : GetValue ()) --2 print ( TestObject : GetValuePlusOne ()) --3 Property Locking It may be intended to make a property read only. Properties can be made explicitly read only using the LockProperty function. Example: local NexusObject = game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"NexusObject\" ) local NexusInstance = require ( NexusObject : WaitForChild ( \"NexusInstance\" )) local TestClass = NexusInstance : Extend () --[[ Constructor for TestClass. --]] function TestClass : __new ( Value ) self : InitializeSuper () --Set the value. self . Value = Value self : LockProperty ( \"Value\" ) end --[[ Returns the value of the class. --]] function TestClass : GetValue () return self . Value end --Create an instance of the class. local TestObject = TestClass . new ( 2 ) print ( TestObject : GetValue ()) --2 TestObject . Value = 3 print ( TestObject : GetValue ()) --\"Value is read-only.\" Property Validation Note This was added in V.1.1.0. Make sure you are using this version or later. Property changes can be validated before set. This allows for modifying of inputs to correct values, or throwing errors if the new property is invalid. Example: local NexusObject = game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"NexusObject\" ) local NexusInstance = require ( NexusObject : WaitForChild ( \"NexusInstance\" )) local TypePropertyValidator = require ( NexusObject : WaitForChild ( \"PropertyValidator\" ): WaitForChild ( \"NexusInstance\" )) local TestClass = NexusInstance : Extend () --Create and add a property validator. local TestObject = TestClass . new () local Valdiator = TypePropertyValidator . new ( \"CFrame\" ) TestObject : AddPropertyValidator ( \"Location\" , Validator ) --Set the property. TestObject . Location = CFrame . new () TestObject . Location = \"Test\" --Throws an error Metamethods Note This was added in V.1.1.0. Make sure you are using this version or later. Most of the metamethods can be implemented into classes directly. This is mostly for __tostring , but can be used for any other Lua metamethod that isn't __index or __newindex . Example: local NexusObject = game : GetServic exusObject : WaitForChild ( \"NexusInstance\" )) local TestClass = NexusInstance : Extend () --[[ Constructor for TestClass. --]] function TestClass : __new ( Value ) self : InitializeSuper () --Set the value. self . Value = Value self : LockProperty ( \"Value\" ) end --[[ Returns the object as a string. --]] function TestClass : __tostring () return \"Test: \" .. self . Value end --Create an instance of the class. local TestObject = TestClass . new ( 2 ) print ( tostring ( TestObject )) --\"Test: 2\"","title":"Why Nexus Instance"},{"location":"why-nexus-instance/#why-nexus-instance","text":"The purpose of Nexus Instance is to simplify classes on Roblox. Although it isn't supported, NexusObject should work off of Roblox. NexusInstance uses Roblox's BindableEvent object, so it will only work on Roblox.","title":"Why Nexus Instance"},{"location":"why-nexus-instance/#simplified-constructor","text":"The main advantage of the Nexus Instance is simplfying the constructor. This removes the requirement for knowledge of metamethods. Example with metamethods: local TestClass = {} --[[ Constructor for TestClass. --]] function TestClass . new ( Value ) --Create the base object. local Object = { Value = Value } setmetatable ( Object , TestClass ) TestClass . __index = TestClass --Return the object. return Object end --[[ Returns the value of the class. --]] function TestClass : GetValue () return self . Value end --Create an instance of the class. local TestObject = TestClass . new ( 2 ) print ( TestObject : GetValue ()) --2 Example: local NexusObject = game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"NexusObject\" ) local NexusInstance = require ( NexusObject : WaitForChild ( \"NexusInstance\" )) local TestClass = NexusInstance : Extend () --[[ Constructor for TestClass. --]] function TestClass : __new ( Value ) --Set the value. self . Value = Value end --[[ Returns the value of the class. --]] function TestClass : GetValue () return self . Value end --Create an instance of the class. local TestObject = TestClass . new ( 2 ) print ( TestObject : GetValue ()) --2","title":"Simplified Constructor"},{"location":"why-nexus-instance/#improved-extending","text":"Nexus Instance provides the context of \"super\" objects. Instanciating the super class can also include parameters using the NexusObject:InitializeSuper(...) function. Example: local NexusObject = game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"NexusObject\" ) local NexusInstance = require ( NexusObject : WaitForChild ( \"NexusInstance\" )) local TestClass = NexusInstance : Extend () local TestSubClass = TestClass : Extend () --[[ Constructor for TestClass. --]] function TestClass : __new ( Value ) --Set the value. self . Value = Value end --[[ Returns the value of the class. --]] function TestClass : GetValue () return self . Value end --[[ Constructor for TestSubClass. --]] function TestSubClass : __new ( Value ) self : InitializeSuper ( Value ) end --[[ Returns the value of the super class plus one. --]] function TestClass : GetValuePlusOne () return self . super : GetValue () + 1 end --Create an instance of the class. local TestObject = TestSubClass . new ( 2 ) print ( TestObject : GetValue ()) --2 print ( TestObject : GetValuePlusOne ()) --3","title":"Improved Extending"},{"location":"why-nexus-instance/#property-locking","text":"It may be intended to make a property read only. Properties can be made explicitly read only using the LockProperty function. Example: local NexusObject = game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"NexusObject\" ) local NexusInstance = require ( NexusObject : WaitForChild ( \"NexusInstance\" )) local TestClass = NexusInstance : Extend () --[[ Constructor for TestClass. --]] function TestClass : __new ( Value ) self : InitializeSuper () --Set the value. self . Value = Value self : LockProperty ( \"Value\" ) end --[[ Returns the value of the class. --]] function TestClass : GetValue () return self . Value end --Create an instance of the class. local TestObject = TestClass . new ( 2 ) print ( TestObject : GetValue ()) --2 TestObject . Value = 3 print ( TestObject : GetValue ()) --\"Value is read-only.\"","title":"Property Locking"},{"location":"why-nexus-instance/#property-validation","text":"Note This was added in V.1.1.0. Make sure you are using this version or later. Property changes can be validated before set. This allows for modifying of inputs to correct values, or throwing errors if the new property is invalid. Example: local NexusObject = game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"NexusObject\" ) local NexusInstance = require ( NexusObject : WaitForChild ( \"NexusInstance\" )) local TypePropertyValidator = require ( NexusObject : WaitForChild ( \"PropertyValidator\" ): WaitForChild ( \"NexusInstance\" )) local TestClass = NexusInstance : Extend () --Create and add a property validator. local TestObject = TestClass . new () local Valdiator = TypePropertyValidator . new ( \"CFrame\" ) TestObject : AddPropertyValidator ( \"Location\" , Validator ) --Set the property. TestObject . Location = CFrame . new () TestObject . Location = \"Test\" --Throws an error","title":"Property Validation"},{"location":"why-nexus-instance/#metamethods","text":"Note This was added in V.1.1.0. Make sure you are using this version or later. Most of the metamethods can be implemented into classes directly. This is mostly for __tostring , but can be used for any other Lua metamethod that isn't __index or __newindex . Example: local NexusObject = game : GetServic exusObject : WaitForChild ( \"NexusInstance\" )) local TestClass = NexusInstance : Extend () --[[ Constructor for TestClass. --]] function TestClass : __new ( Value ) self : InitializeSuper () --Set the value. self . Value = Value self : LockProperty ( \"Value\" ) end --[[ Returns the object as a string. --]] function TestClass : __tostring () return \"Test: \" .. self . Value end --Create an instance of the class. local TestObject = TestClass . new ( 2 ) print ( tostring ( TestObject )) --\"Test: 2\"","title":"Metamethods"},{"location":"getting-started/extending-classes/","text":"Extending Classes Extending a Class Any class that inherits from NexusObject can be extended. Extending can be done by using NexusObject::Extend on the base class. local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Sources = ReplicatedStorage : WaitForChild ( \"Sources\" ) local NexusObject = require ( Sources : WaitForChild ( \"NexusObject\" ): WaitForChild ( \"NexusObject\" )) --Base extension of NexusObject. local ExtendedClass = NexusObject : Extend () --Base extension of ExtendedClass (inherits from NexusObject). local ExtendedClass2 = ExtendedClass : Extend () Setting the ClassName NexusObject includes an IsA function for checking if an object inherits from a class. All objects will inherit from NexusObject , so IsA(\"NexusObject\") will always return true. A custom class name can be added to any class using NexusObject::SetClassName , which should always be called on the static class. local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Sources = ReplicatedStorage : WaitForChild ( \"Sources\" ) local NexusObject = require ( Sources : WaitForChild ( \"NexusObject\" ): WaitForChild ( \"NexusObject\" )) --Base extension of NexusObject. local ExtendedClass = NexusObject : Extend () ExtendedClass : SetClassName ( \"ExtendedClass\" ) print ( ExtendedClass : IsA ( \"ExtendedClass\" )) --true print ( ExtendedClass : IsA ( \"NexusObject\" )) --true print ( ExtendedClass : IsA ( \"Instance\" )) --false Overriding the Constructor Objects can be created by calling .new(...) , which will handle the new class. To handle a custom constructor, NexusObject::__new can be overriden. To set up the super class, NexusObject::InitializeSuper can be called. By default, the default constructor calls NexusObject::InitializeSuper with the same arguments. local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Sources = ReplicatedStorage : WaitForChild ( \"Sources\" ) local NexusObject = require ( Sources : WaitForChild ( \"NexusObject\" ): WaitForChild ( \"NexusObject\" )) --Base extension of NexusObject. local ExtendedClass = NexusObject : Extend () ExtendedClass : SetClassName ( \"ExtendedClass\" ) --Overrides the constructor. function ExtendedClass : __new ( Value1 , Value2 ) self . Value1 = Value1 self . Value2 = Value2 end --Base extension of ExtendedClass. local ExtendedClass2 = ExtendedClass : Extend () ExtendedClass2 : SetClassName ( \"ExtendedClass2\" ) --Overrides the constructor. function ExtendedClass2 : __new (...) self : InitializeSuper (...) self . Value3 = self . Value1 + self . Value2 end --Create the object. local ExtendedObject2 = ExtendedClass2 . new ( 1 , 2 )","title":"Extending Classes"},{"location":"getting-started/extending-classes/#extending-classes","text":"","title":"Extending Classes"},{"location":"getting-started/extending-classes/#extending-a-class","text":"Any class that inherits from NexusObject can be extended. Extending can be done by using NexusObject::Extend on the base class. local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Sources = ReplicatedStorage : WaitForChild ( \"Sources\" ) local NexusObject = require ( Sources : WaitForChild ( \"NexusObject\" ): WaitForChild ( \"NexusObject\" )) --Base extension of NexusObject. local ExtendedClass = NexusObject : Extend () --Base extension of ExtendedClass (inherits from NexusObject). local ExtendedClass2 = ExtendedClass : Extend ()","title":"Extending a Class"},{"location":"getting-started/extending-classes/#setting-the-classname","text":"NexusObject includes an IsA function for checking if an object inherits from a class. All objects will inherit from NexusObject , so IsA(\"NexusObject\") will always return true. A custom class name can be added to any class using NexusObject::SetClassName , which should always be called on the static class. local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Sources = ReplicatedStorage : WaitForChild ( \"Sources\" ) local NexusObject = require ( Sources : WaitForChild ( \"NexusObject\" ): WaitForChild ( \"NexusObject\" )) --Base extension of NexusObject. local ExtendedClass = NexusObject : Extend () ExtendedClass : SetClassName ( \"ExtendedClass\" ) print ( ExtendedClass : IsA ( \"ExtendedClass\" )) --true print ( ExtendedClass : IsA ( \"NexusObject\" )) --true print ( ExtendedClass : IsA ( \"Instance\" )) --false","title":"Setting the ClassName"},{"location":"getting-started/extending-classes/#overriding-the-constructor","text":"Objects can be created by calling .new(...) , which will handle the new class. To handle a custom constructor, NexusObject::__new can be overriden. To set up the super class, NexusObject::InitializeSuper can be called. By default, the default constructor calls NexusObject::InitializeSuper with the same arguments. local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Sources = ReplicatedStorage : WaitForChild ( \"Sources\" ) local NexusObject = require ( Sources : WaitForChild ( \"NexusObject\" ): WaitForChild ( \"NexusObject\" )) --Base extension of NexusObject. local ExtendedClass = NexusObject : Extend () ExtendedClass : SetClassName ( \"ExtendedClass\" ) --Overrides the constructor. function ExtendedClass : __new ( Value1 , Value2 ) self . Value1 = Value1 self . Value2 = Value2 end --Base extension of ExtendedClass. local ExtendedClass2 = ExtendedClass : Extend () ExtendedClass2 : SetClassName ( \"ExtendedClass2\" ) --Overrides the constructor. function ExtendedClass2 : __new (...) self : InitializeSuper (...) self . Value3 = self . Value1 + self . Value2 end --Create the object. local ExtendedObject2 = ExtendedClass2 . new ( 1 , 2 )","title":"Overriding the Constructor"},{"location":"getting-started/classes/nexusinstance/","text":"NexusInstance (Extends NexusObject ) NexusInstance is an extension of NexusObject to add an event for changes to properties and locking properties. The documentation below is only for what is overriden or implemented by NexusInstance . Everything else from NexusObject is inherited. static NexusInstance.ClassName The class name of the object. By default, this will be \"NexusInstance\" and is locked by the constructor. static NexusInstance.new() Creates an instance of NexusInstance . It isn't intended to be used since it should be extended. NexusInstance.Changed A NexusEvent that is invoked when a property change is made. When a change is made, the signal is invoked with the first parameter of the callback being the name of the property that changed. NexusInstance:AddGenericPropertyValidator(Validator) Adds a NexusPropertyValidator to validate changes to any property when a property is changed. NexusInstance:AddPropertyValidator(PropertyName,Validator) Adds a NexusPropertyValidator to validate changes to properties when the property is changed. NexusInstance:AddGenericPropertyFinalizer(Callback<Name,Value>) Adds a finalizer for when a property is set. This is intended to prevent invoking changed events if there is a problem. NexusInstance:AddPropertyFinalizer(PropertyName,Callback<Name,Value>) Adds a finalizer for when a given property is set. This is intended to prevent invoking changed events if there is a problem. NexusInstance:LockProperty(PropertyName) Locks a property from being modified. If changing the property is attempted, an error will be thrown saying \"PROPERTY_NAME is read-only.\" When a property is locked, it can't be unlocked. NexusInstance:HidePropertyChanges(PropertyName) Hides all changed signals from being fired for a given property. This is intended for internal states. Note This function only prevents the changed signal for NexusObject.Changed . Using NexusInstance:GetPropertyChangedSignal(PropertyName) will bypass this, but it is only recommended for the internal state. NexusInstance:HideNextPropertyChange(PropertyName) Hides the next changed signal from being fired for a given property. This is intended for cases where a Changed signal will invoke a change that causes a stack overflow. NexusInstance:GetPropertyChangedSignal(PropertyName) Returns an NexusEvent that is invoked when a specific property is changed. NexusInstance:Destroy() Disconnects the events of the instance.","title":"NexusInstance"},{"location":"getting-started/classes/nexusinstance/#nexusinstance","text":"(Extends NexusObject ) NexusInstance is an extension of NexusObject to add an event for changes to properties and locking properties. The documentation below is only for what is overriden or implemented by NexusInstance . Everything else from NexusObject is inherited.","title":"NexusInstance"},{"location":"getting-started/classes/nexusinstance/#static-nexusinstanceclassname","text":"The class name of the object. By default, this will be \"NexusInstance\" and is locked by the constructor.","title":"static NexusInstance.ClassName"},{"location":"getting-started/classes/nexusinstance/#static-nexusinstancenew","text":"Creates an instance of NexusInstance . It isn't intended to be used since it should be extended.","title":"static NexusInstance.new()"},{"location":"getting-started/classes/nexusinstance/#nexusinstancechanged","text":"A NexusEvent that is invoked when a property change is made. When a change is made, the signal is invoked with the first parameter of the callback being the name of the property that changed.","title":"NexusInstance.Changed"},{"location":"getting-started/classes/nexusinstance/#nexusinstanceaddgenericpropertyvalidatorvalidator","text":"Adds a NexusPropertyValidator to validate changes to any property when a property is changed.","title":"NexusInstance:AddGenericPropertyValidator(Validator)"},{"location":"getting-started/classes/nexusinstance/#nexusinstanceaddpropertyvalidatorpropertynamevalidator","text":"Adds a NexusPropertyValidator to validate changes to properties when the property is changed.","title":"NexusInstance:AddPropertyValidator(PropertyName,Validator)"},{"location":"getting-started/classes/nexusinstance/#nexusinstanceaddgenericpropertyfinalizercallbacknamevalue","text":"Adds a finalizer for when a property is set. This is intended to prevent invoking changed events if there is a problem.","title":"NexusInstance:AddGenericPropertyFinalizer(Callback&lt;Name,Value&gt;)"},{"location":"getting-started/classes/nexusinstance/#nexusinstanceaddpropertyfinalizerpropertynamecallbacknamevalue","text":"Adds a finalizer for when a given property is set. This is intended to prevent invoking changed events if there is a problem.","title":"NexusInstance:AddPropertyFinalizer(PropertyName,Callback&lt;Name,Value&gt;)"},{"location":"getting-started/classes/nexusinstance/#nexusinstancelockpropertypropertyname","text":"Locks a property from being modified. If changing the property is attempted, an error will be thrown saying \"PROPERTY_NAME is read-only.\" When a property is locked, it can't be unlocked.","title":"NexusInstance:LockProperty(PropertyName)"},{"location":"getting-started/classes/nexusinstance/#nexusinstancehidepropertychangespropertyname","text":"Hides all changed signals from being fired for a given property. This is intended for internal states. Note This function only prevents the changed signal for NexusObject.Changed . Using NexusInstance:GetPropertyChangedSignal(PropertyName) will bypass this, but it is only recommended for the internal state.","title":"NexusInstance:HidePropertyChanges(PropertyName)"},{"location":"getting-started/classes/nexusinstance/#nexusinstancehidenextpropertychangepropertyname","text":"Hides the next changed signal from being fired for a given property. This is intended for cases where a Changed signal will invoke a change that causes a stack overflow.","title":"NexusInstance:HideNextPropertyChange(PropertyName)"},{"location":"getting-started/classes/nexusinstance/#nexusinstancegetpropertychangedsignalpropertyname","text":"Returns an NexusEvent that is invoked when a specific property is changed.","title":"NexusInstance:GetPropertyChangedSignal(PropertyName)"},{"location":"getting-started/classes/nexusinstance/#nexusinstancedestroy","text":"Disconnects the events of the instance.","title":"NexusInstance:Destroy()"},{"location":"getting-started/classes/nexusobject/","text":"NexusObject NexusObject is the root object that is used for extending. It contains the least amount of functionality, with the rest expected to be implemented by extending the class. NexusObject may work in a vanilla Lua environment, but Roblox is the only environment it is validated for. static NexusObject.ClassName The class name of the object. By default, this will be \"NexusObject\" , but isn't locked. Note If the class name isn't overriden, it will inherit from the class it extends from. static NexusObject.new() Creates an instance of NexusObject . It isn't intended to be used since it should be extended. static NexusObject:Extend() Extends a class to allow for implementing properties and functions while inheriting the super class's behavior. static NexusObject:__classextended(OtherClass) Called after extending when another class extends the class. The purpose of this is to add attributes to the class. Note When this function is overriden, it isn't called explicitly to the next super class. It is recommended to have self.super:__classextended(OtherClass) if this function is overriden. If it isn't, this done implicitly. static NexusObject:SetClassName(ClassName) Sets the class name of the object. It should be called staticly (ex: ExtendedClass:SetClassName(\"ClassName\") , not self:SetClassName(\"ClassName\") ). NexusObject.super The super-class of the object. It will have all of the attributes and methods defined to the object, but all class-level attributes and methods will refer to the super-class. NexusObject.object The object itself. This is intended to guarentee the root class method is called, mainly in the constructor. NexusObject.class The class of the object. It will have the methods and attributes of the class, but will not have any of the object. NexusObject:__new() Base constructor of NexusObject . When an object extends NexusObject , this function should be overriden by the constructor required for that class. For NexusObject , this function is empty. NexusObject:InitializeSuper(...) Initializes the super class. The paramters given by ... are passed into the constructor of the super class ( __new(...) ). It should be called in the constructor of the class. NexusObject:IsA(ClassName) Returns if the object is or inherits from a class with the given class name.","title":"NexusObject"},{"location":"getting-started/classes/nexusobject/#nexusobject","text":"NexusObject is the root object that is used for extending. It contains the least amount of functionality, with the rest expected to be implemented by extending the class. NexusObject may work in a vanilla Lua environment, but Roblox is the only environment it is validated for.","title":"NexusObject"},{"location":"getting-started/classes/nexusobject/#static-nexusobjectclassname","text":"The class name of the object. By default, this will be \"NexusObject\" , but isn't locked. Note If the class name isn't overriden, it will inherit from the class it extends from.","title":"static NexusObject.ClassName"},{"location":"getting-started/classes/nexusobject/#static-nexusobjectnew","text":"Creates an instance of NexusObject . It isn't intended to be used since it should be extended.","title":"static NexusObject.new()"},{"location":"getting-started/classes/nexusobject/#static-nexusobjectextend","text":"Extends a class to allow for implementing properties and functions while inheriting the super class's behavior.","title":"static NexusObject:Extend()"},{"location":"getting-started/classes/nexusobject/#static-nexusobject__classextendedotherclass","text":"Called after extending when another class extends the class. The purpose of this is to add attributes to the class. Note When this function is overriden, it isn't called explicitly to the next super class. It is recommended to have self.super:__classextended(OtherClass) if this function is overriden. If it isn't, this done implicitly.","title":"static NexusObject:__classextended(OtherClass)"},{"location":"getting-started/classes/nexusobject/#static-nexusobjectsetclassnameclassname","text":"Sets the class name of the object. It should be called staticly (ex: ExtendedClass:SetClassName(\"ClassName\") , not self:SetClassName(\"ClassName\") ).","title":"static NexusObject:SetClassName(ClassName)"},{"location":"getting-started/classes/nexusobject/#nexusobjectsuper","text":"The super-class of the object. It will have all of the attributes and methods defined to the object, but all class-level attributes and methods will refer to the super-class.","title":"NexusObject.super"},{"location":"getting-started/classes/nexusobject/#nexusobjectobject","text":"The object itself. This is intended to guarentee the root class method is called, mainly in the constructor.","title":"NexusObject.object"},{"location":"getting-started/classes/nexusobject/#nexusobjectclass","text":"The class of the object. It will have the methods and attributes of the class, but will not have any of the object.","title":"NexusObject.class"},{"location":"getting-started/classes/nexusobject/#nexusobject__new","text":"Base constructor of NexusObject . When an object extends NexusObject , this function should be overriden by the constructor required for that class. For NexusObject , this function is empty.","title":"NexusObject:__new()"},{"location":"getting-started/classes/nexusobject/#nexusobjectinitializesuper","text":"Initializes the super class. The paramters given by ... are passed into the constructor of the super class ( __new(...) ). It should be called in the constructor of the class.","title":"NexusObject:InitializeSuper(...)"},{"location":"getting-started/classes/nexusobject/#nexusobjectisaclassname","text":"Returns if the object is or inherits from a class with the given class name.","title":"NexusObject:IsA(ClassName)"},{"location":"getting-started/classes/event/nexusconnection/","text":"NexusConnection (Extends NexusObject ) Stores the function of an event connection and handles invoking the function. static NexusConnection.ClassName The class name of the object. By default, this will be \"NexusConnection\" . static NexusConnection.new(Event,ConnectedFunction) Creates a connection for a given NexusEvent . The connected function is called when the connection is fired. NexusConnection.Connected Boolean represneting if the connection is active. NexusConnection:Fire(...) Fires the connection with the given parameters. NexusConnection:Disconnect() Disconnects the connection from the event.","title":"NexusConnection"},{"location":"getting-started/classes/event/nexusconnection/#nexusconnection","text":"(Extends NexusObject ) Stores the function of an event connection and handles invoking the function.","title":"NexusConnection"},{"location":"getting-started/classes/event/nexusconnection/#static-nexusconnectionclassname","text":"The class name of the object. By default, this will be \"NexusConnection\" .","title":"static NexusConnection.ClassName"},{"location":"getting-started/classes/event/nexusconnection/#static-nexusconnectionneweventconnectedfunction","text":"Creates a connection for a given NexusEvent . The connected function is called when the connection is fired.","title":"static NexusConnection.new(Event,ConnectedFunction)"},{"location":"getting-started/classes/event/nexusconnection/#nexusconnectionconnected","text":"Boolean represneting if the connection is active.","title":"NexusConnection.Connected"},{"location":"getting-started/classes/event/nexusconnection/#nexusconnectionfire","text":"Fires the connection with the given parameters.","title":"NexusConnection:Fire(...)"},{"location":"getting-started/classes/event/nexusconnection/#nexusconnectiondisconnect","text":"Disconnects the connection from the event.","title":"NexusConnection:Disconnect()"},{"location":"getting-started/classes/event/nexusevent/","text":"RobloxEvent (Extends NexusObject ) Sends and listens to events. static NexusEvent.ClassName The class name of the object. By default, this will be \"NexusEvent\" . NexusEvent:Disconnected(Connection) Invoked when a connection is disconnected. This is used for clearing events when they are disconnected. NexusEvent:Connection(Function) Establishes a function to be called whenever the event is raised. The parameters of the passed in function can vary in length since they are dependent on what is passed into NexusEvent::Fire . Returns a NexusConnection . NexusEvent:Disconnect() Disconnects all connected events. NexusEvent:Fire(...) Fires the event with the given parameters. NexusEvent:Wait() Waits for the event to be fired and returns the parameters that were fired.","title":"NexusEvent"},{"location":"getting-started/classes/event/nexusevent/#robloxevent","text":"(Extends NexusObject ) Sends and listens to events.","title":"RobloxEvent"},{"location":"getting-started/classes/event/nexusevent/#static-nexuseventclassname","text":"The class name of the object. By default, this will be \"NexusEvent\" .","title":"static NexusEvent.ClassName"},{"location":"getting-started/classes/event/nexusevent/#nexuseventdisconnectedconnection","text":"Invoked when a connection is disconnected. This is used for clearing events when they are disconnected.","title":"NexusEvent:Disconnected(Connection)"},{"location":"getting-started/classes/event/nexusevent/#nexuseventconnectionfunction","text":"Establishes a function to be called whenever the event is raised. The parameters of the passed in function can vary in length since they are dependent on what is passed into NexusEvent::Fire . Returns a NexusConnection .","title":"NexusEvent:Connection(Function)"},{"location":"getting-started/classes/event/nexusevent/#nexuseventdisconnect","text":"Disconnects all connected events.","title":"NexusEvent:Disconnect()"},{"location":"getting-started/classes/event/nexusevent/#nexuseventfire","text":"Fires the event with the given parameters.","title":"NexusEvent:Fire(...)"},{"location":"getting-started/classes/event/nexusevent/#nexuseventwait","text":"Waits for the event to be fired and returns the parameters that were fired.","title":"NexusEvent:Wait()"},{"location":"getting-started/classes/propertyvalidator/typepropertyvalidator/","text":"TypePropertyValidator (Extends NexusObject ) (Implements NexusPropertyValidator ) Implements the NexusPropertyValidator by vchecking if the type or class is the same. static TypePropertyValidator.ClassName The class name of the object. By default, this will be \"TypePropertyValidator\" .","title":"TypePropertyValidator"},{"location":"getting-started/classes/propertyvalidator/typepropertyvalidator/#typepropertyvalidator","text":"(Extends NexusObject ) (Implements NexusPropertyValidator ) Implements the NexusPropertyValidator by vchecking if the type or class is the same.","title":"TypePropertyValidator"},{"location":"getting-started/classes/propertyvalidator/typepropertyvalidator/#static-typepropertyvalidatorclassname","text":"The class name of the object. By default, this will be \"TypePropertyValidator\" .","title":"static TypePropertyValidator.ClassName"}]}